pDefs.   Program ::= [Def] ;

DFun.    Def    ::= Type Id "(" [Arg] ")" "{" [Stm] "}" ;

terminator Def "" ;

ADecl.   Arg    ::= Type Id ;

separator Arg "," ;

SExp.        Stm ::= Exp ";" ;
SDecls.      Stm ::= Type [Id] ";" ;
SInit.       Stm ::= Type Id "=" Exp ";" ;
SReturn.     Stm ::= "return" Exp ";" ;
SReturnVoid. Stm ::= "return" ";" ;
SAte.        Stm ::= "ate" "(" Exp ")" Stm ;
SFor.        Stm ::= "para" "(" [Exp] ";" [Exp] ";" [Exp] ")" Stm ;
SBlock.      Stm ::= "{" [Stm] "}" ;
SSeSenao.    Stm ::= "se" "(" Exp ")" Stm "senao" Stm ;
SClaudiz.    Stm ::= "claudiz" "(" Exp ")" ";" ;  
SReceba.     Stm ::= "receba" "(" Type [Id] ")" ";" ; 

terminator Stm "" ;

ETrue.   Exp15  ::= "true" ;
EFalse.  Exp15  ::= "false" ;
EInt.    Exp15  ::= Integer ;
EDouble. Exp15  ::= Double ;
EString. Exp15  ::= String ;
EId.     Exp15  ::= Id ; 

EApp.    Exp15  ::= Id "(" [Exp] ")" ;

ETimes.  Exp12  ::= Exp12 "*"  Exp13 ;
EDiv.    Exp12  ::= Exp12 "/"  Exp13 ;
EPlus.   Exp11  ::= Exp11 "+"  Exp12 ;
EMinus.  Exp11  ::= Exp11 "-"  Exp12 ;
ELt.     Exp9   ::= Exp9  "<"  Exp10 ;
EGt.     Exp9   ::= Exp9  ">"  Exp10 ;
ELtEq.   Exp9   ::= Exp9  "<=" Exp10 ;
EGtEq.   Exp9   ::= Exp9  ">=" Exp10 ;
EEq.     Exp8   ::= Exp8  "==" Exp9 ;
ENEq.    Exp8   ::= Exp7  "<>" Exp8 ;
EAss.    Exp2   ::= Exp3 "=" Exp2 ;

internal ETyped. Exp15 ::= "(" Exp ":" Type ")" ;

coercions Exp 15 ;

separator Exp "," ;

rules Type   ::= "bool" | "int" | "double" | "void" | "string" ;

token Id (letter (letter | digit | '_')*) ;

separator nonempty Id "," ;

comment "#" ;
comment "//" ;
comment "/*" "*/" ;
comment "@";

